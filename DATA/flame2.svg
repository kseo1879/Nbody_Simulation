<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="358.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="341" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="341" > </text>
<g id="frames">
<g >
<title>__sqrt_finite@GLIBC_2.15 (59 samples, 1.84%)</title><rect x="884.9" y="261" width="21.7" height="15.0" fill="rgb(207,172,30)" rx="2" ry="2" />
<text  x="887.90" y="271.5" >_..</text>
</g>
<g >
<title>apic_timer_interrupt (3 samples, 0.09%)</title><rect x="877.6" y="245" width="1.1" height="15.0" fill="rgb(213,182,5)" rx="2" ry="2" />
<text  x="880.56" y="255.5" ></text>
</g>
<g >
<title>wake_up_new_task (14 samples, 0.44%)</title><rect x="18.4" y="181" width="5.2" height="15.0" fill="rgb(246,36,43)" rx="2" ry="2" />
<text  x="21.44" y="191.5" ></text>
</g>
<g >
<title>__getpagesize (1 samples, 0.03%)</title><rect x="41.2" y="213" width="0.4" height="15.0" fill="rgb(207,122,1)" rx="2" ry="2" />
<text  x="44.21" y="223.5" ></text>
</g>
<g >
<title>do_sched_yield (12 samples, 0.37%)</title><rect x="36.8" y="165" width="4.4" height="15.0" fill="rgb(249,193,47)" rx="2" ry="2" />
<text  x="39.80" y="175.5" ></text>
</g>
<g >
<title>perf_iterate_ctx (1 samples, 0.03%)</title><rect x="17.3" y="117" width="0.4" height="15.0" fill="rgb(235,125,45)" rx="2" ry="2" />
<text  x="20.34" y="127.5" ></text>
</g>
<g >
<title>do_syscall_64 (19 samples, 0.59%)</title><rect x="34.2" y="197" width="7.0" height="15.0" fill="rgb(211,61,42)" rx="2" ry="2" />
<text  x="37.23" y="207.5" ></text>
</g>
<g >
<title>copy_process (10 samples, 0.31%)</title><rect x="14.8" y="181" width="3.6" height="15.0" fill="rgb(253,7,42)" rx="2" ry="2" />
<text  x="17.77" y="191.5" ></text>
</g>
<g >
<title>mm_release (2 samples, 0.06%)</title><rect x="906.6" y="181" width="0.7" height="15.0" fill="rgb(206,17,43)" rx="2" ry="2" />
<text  x="909.57" y="191.5" ></text>
</g>
<g >
<title>__ieee754_pow_fma (2,243 samples, 69.79%)</title><rect x="55.2" y="261" width="823.5" height="15.0" fill="rgb(217,174,40)" rx="2" ry="2" />
<text  x="58.16" y="271.5" >__ieee754_pow_fma</text>
</g>
<g >
<title>swake_up_one (1 samples, 0.03%)</title><rect x="878.3" y="117" width="0.4" height="15.0" fill="rgb(243,25,31)" rx="2" ry="2" />
<text  x="881.29" y="127.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.06%)</title><rect x="906.6" y="261" width="0.7" height="15.0" fill="rgb(247,130,2)" rx="2" ry="2" />
<text  x="909.57" y="271.5" ></text>
</g>
<g >
<title>_do_fork (25 samples, 0.78%)</title><rect x="14.4" y="197" width="9.2" height="15.0" fill="rgb(218,91,39)" rx="2" ry="2" />
<text  x="17.41" y="207.5" ></text>
</g>
<g >
<title>uhci_hub_status_data (1 samples, 0.03%)</title><rect x="1189.6" y="101" width="0.4" height="15.0" fill="rgb(241,34,22)" rx="2" ry="2" />
<text  x="1192.63" y="111.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (11 samples, 0.34%)</title><rect x="10.0" y="277" width="4.0" height="15.0" fill="rgb(210,95,2)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>handle_mm_fault (2 samples, 0.06%)</title><rect x="24.0" y="149" width="0.7" height="15.0" fill="rgb(227,175,32)" rx="2" ry="2" />
<text  x="26.95" y="159.5" ></text>
</g>
<g >
<title>all (3,214 samples, 100%)</title><rect x="10.0" y="309" width="1180.0" height="15.0" fill="rgb(231,95,12)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>prep_new_page (1 samples, 0.03%)</title><rect x="17.0" y="101" width="0.3" height="15.0" fill="rgb(227,225,35)" rx="2" ry="2" />
<text  x="19.98" y="111.5" ></text>
</g>
<g >
<title>do_futex (2 samples, 0.06%)</title><rect x="906.6" y="165" width="0.7" height="15.0" fill="rgb(221,172,40)" rx="2" ry="2" />
<text  x="909.57" y="175.5" ></text>
</g>
<g >
<title>__sched_text_start (12 samples, 0.37%)</title><rect x="36.8" y="133" width="4.4" height="15.0" fill="rgb(242,143,39)" rx="2" ry="2" />
<text  x="39.80" y="143.5" ></text>
</g>
<g >
<title>vm_area_dup (1 samples, 0.03%)</title><rect x="12.6" y="165" width="0.3" height="15.0" fill="rgb(241,174,45)" rx="2" ry="2" />
<text  x="15.57" y="175.5" ></text>
</g>
<g >
<title>rh_timer_func (1 samples, 0.03%)</title><rect x="1189.6" y="133" width="0.4" height="15.0" fill="rgb(227,125,26)" rx="2" ry="2" />
<text  x="1192.63" y="143.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="1189.6" y="197" width="0.4" height="15.0" fill="rgb(229,22,43)" rx="2" ry="2" />
<text  x="1192.63" y="207.5" ></text>
</g>
<g >
<title>run_timer_softirq (1 samples, 0.03%)</title><rect x="1189.6" y="181" width="0.4" height="15.0" fill="rgb(213,24,8)" rx="2" ry="2" />
<text  x="1192.63" y="191.5" ></text>
</g>
<g >
<title>mmap_region (4 samples, 0.12%)</title><rect x="10.0" y="165" width="1.5" height="15.0" fill="rgb(216,169,12)" rx="2" ry="2" />
<text  x="13.00" y="175.5" ></text>
</g>
<g >
<title>release_pages (1 samples, 0.03%)</title><rect x="24.3" y="53" width="0.4" height="15.0" fill="rgb(227,148,31)" rx="2" ry="2" />
<text  x="27.32" y="63.5" ></text>
</g>
<g >
<title>memcpy_orig (1 samples, 0.03%)</title><rect x="17.3" y="85" width="0.4" height="15.0" fill="rgb(242,1,53)" rx="2" ry="2" />
<text  x="20.34" y="95.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (19 samples, 0.59%)</title><rect x="34.2" y="213" width="7.0" height="15.0" fill="rgb(221,116,31)" rx="2" ry="2" />
<text  x="37.23" y="223.5" ></text>
</g>
<g >
<title>start_thread (3,126 samples, 97.26%)</title><rect x="42.3" y="277" width="1147.7" height="15.0" fill="rgb(219,140,27)" rx="2" ry="2" />
<text  x="45.31" y="287.5" >start_thread</text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.06%)</title><rect x="906.6" y="245" width="0.7" height="15.0" fill="rgb(250,36,8)" rx="2" ry="2" />
<text  x="909.57" y="255.5" ></text>
</g>
<g >
<title>[libm-2.31.so] (12 samples, 0.37%)</title><rect x="42.3" y="261" width="4.4" height="15.0" fill="rgb(239,169,15)" rx="2" ry="2" />
<text  x="45.31" y="271.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (1 samples, 0.03%)</title><rect x="12.6" y="149" width="0.3" height="15.0" fill="rgb(226,211,28)" rx="2" ry="2" />
<text  x="15.57" y="159.5" ></text>
</g>
<g >
<title>__split_vma (1 samples, 0.03%)</title><rect x="12.6" y="181" width="0.3" height="15.0" fill="rgb(222,51,18)" rx="2" ry="2" />
<text  x="15.57" y="191.5" ></text>
</g>
<g >
<title>rcu_do_batch (1 samples, 0.03%)</title><rect x="877.9" y="149" width="0.4" height="15.0" fill="rgb(241,163,29)" rx="2" ry="2" />
<text  x="880.93" y="159.5" ></text>
</g>
<g >
<title>__sqrt (17 samples, 0.53%)</title><rect x="878.7" y="261" width="6.2" height="15.0" fill="rgb(250,76,27)" rx="2" ry="2" />
<text  x="881.66" y="271.5" ></text>
</g>
<g >
<title>__vmalloc_node_range (6 samples, 0.19%)</title><rect x="15.1" y="165" width="2.2" height="15.0" fill="rgb(228,60,3)" rx="2" ry="2" />
<text  x="18.14" y="175.5" ></text>
</g>
<g >
<title>security_vm_enough_memory_mm (3 samples, 0.09%)</title><rect x="10.4" y="149" width="1.1" height="15.0" fill="rgb(212,106,31)" rx="2" ry="2" />
<text  x="13.37" y="159.5" ></text>
</g>
<g >
<title>do_syscall_64 (25 samples, 0.78%)</title><rect x="14.4" y="229" width="9.2" height="15.0" fill="rgb(242,166,24)" rx="2" ry="2" />
<text  x="17.41" y="239.5" ></text>
</g>
<g >
<title>do_exit (2 samples, 0.06%)</title><rect x="906.6" y="213" width="0.7" height="15.0" fill="rgb(208,175,34)" rx="2" ry="2" />
<text  x="909.57" y="223.5" ></text>
</g>
<g >
<title>rcu_gp_kthread_wake (1 samples, 0.03%)</title><rect x="878.3" y="133" width="0.4" height="15.0" fill="rgb(250,118,32)" rx="2" ry="2" />
<text  x="881.29" y="143.5" ></text>
</g>
<g >
<title>cpu_clock_event_init (1 samples, 0.03%)</title><rect x="18.1" y="101" width="0.3" height="15.0" fill="rgb(224,197,22)" rx="2" ry="2" />
<text  x="21.08" y="111.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (2 samples, 0.06%)</title><rect x="13.3" y="165" width="0.7" height="15.0" fill="rgb(222,36,8)" rx="2" ry="2" />
<text  x="16.30" y="175.5" ></text>
</g>
<g >
<title>step (46 samples, 1.43%)</title><rect x="25.1" y="245" width="16.8" height="15.0" fill="rgb(220,83,37)" rx="2" ry="2" />
<text  x="28.05" y="255.5" ></text>
</g>
<g >
<title>perf_event_task (1 samples, 0.03%)</title><rect x="17.3" y="149" width="0.4" height="15.0" fill="rgb(225,64,38)" rx="2" ry="2" />
<text  x="20.34" y="159.5" ></text>
</g>
<g >
<title>get_page_from_freelist (4 samples, 0.12%)</title><rect x="15.9" y="117" width="1.4" height="15.0" fill="rgb(228,130,14)" rx="2" ry="2" />
<text  x="18.87" y="127.5" ></text>
</g>
<g >
<title>__clone (25 samples, 0.78%)</title><rect x="14.4" y="261" width="9.2" height="15.0" fill="rgb(236,106,0)" rx="2" ry="2" />
<text  x="17.41" y="271.5" ></text>
</g>
<g >
<title>__x64_sys_sched_yield (12 samples, 0.37%)</title><rect x="36.8" y="181" width="4.4" height="15.0" fill="rgb(252,160,52)" rx="2" ry="2" />
<text  x="39.80" y="191.5" ></text>
</g>
<g >
<title>percpu_counter_add_batch (1 samples, 0.03%)</title><rect x="11.1" y="133" width="0.4" height="15.0" fill="rgb(205,76,37)" rx="2" ry="2" />
<text  x="14.10" y="143.5" ></text>
</g>
<g >
<title>rcu_report_qs_rnp (1 samples, 0.03%)</title><rect x="878.3" y="149" width="0.4" height="15.0" fill="rgb(206,30,53)" rx="2" ry="2" />
<text  x="881.29" y="159.5" ></text>
</g>
<g >
<title>rcu_core (2 samples, 0.06%)</title><rect x="877.9" y="165" width="0.8" height="15.0" fill="rgb(223,73,31)" rx="2" ry="2" />
<text  x="880.93" y="175.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (2 samples, 0.06%)</title><rect x="13.3" y="149" width="0.7" height="15.0" fill="rgb(208,205,34)" rx="2" ry="2" />
<text  x="16.30" y="159.5" ></text>
</g>
<g >
<title>__interceptor_free (1 samples, 0.03%)</title><rect x="41.6" y="197" width="0.3" height="15.0" fill="rgb(239,222,49)" rx="2" ry="2" />
<text  x="44.57" y="207.5" ></text>
</g>
<g >
<title>perf_event_mmap (1 samples, 0.03%)</title><rect x="10.0" y="149" width="0.4" height="15.0" fill="rgb(216,129,25)" rx="2" ry="2" />
<text  x="13.00" y="159.5" ></text>
</g>
<g >
<title>perf_event_fork (1 samples, 0.03%)</title><rect x="17.3" y="165" width="0.4" height="15.0" fill="rgb(222,77,49)" rx="2" ry="2" />
<text  x="20.34" y="175.5" ></text>
</g>
<g >
<title>schedule (12 samples, 0.37%)</title><rect x="36.8" y="149" width="4.4" height="15.0" fill="rgb(231,89,26)" rx="2" ry="2" />
<text  x="39.80" y="159.5" ></text>
</g>
<g >
<title>__x64_sys_exit (2 samples, 0.06%)</title><rect x="906.6" y="229" width="0.7" height="15.0" fill="rgb(243,215,49)" rx="2" ry="2" />
<text  x="909.57" y="239.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (4 samples, 0.12%)</title><rect x="12.6" y="229" width="1.4" height="15.0" fill="rgb(230,140,53)" rx="2" ry="2" />
<text  x="15.57" y="239.5" ></text>
</g>
<g >
<title>alloc_vmap_area (1 samples, 0.03%)</title><rect x="15.5" y="133" width="0.4" height="15.0" fill="rgb(221,206,47)" rx="2" ry="2" />
<text  x="18.51" y="143.5" ></text>
</g>
<g >
<title>__x64_sys_mmap (7 samples, 0.22%)</title><rect x="10.0" y="229" width="2.6" height="15.0" fill="rgb(247,58,18)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>find_vma (1 samples, 0.03%)</title><rect x="12.9" y="181" width="0.4" height="15.0" fill="rgb(211,102,32)" rx="2" ry="2" />
<text  x="15.94" y="191.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (4 samples, 0.12%)</title><rect x="15.9" y="133" width="1.4" height="15.0" fill="rgb(251,123,43)" rx="2" ry="2" />
<text  x="18.87" y="143.5" ></text>
</g>
<g >
<title>__lock_text_start (14 samples, 0.44%)</title><rect x="18.4" y="165" width="5.2" height="15.0" fill="rgb(242,227,36)" rx="2" ry="2" />
<text  x="21.44" y="175.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (1 samples, 0.03%)</title><rect x="14.8" y="149" width="0.3" height="15.0" fill="rgb(248,7,44)" rx="2" ry="2" />
<text  x="17.77" y="159.5" ></text>
</g>
<g >
<title>main (47 samples, 1.46%)</title><rect x="24.7" y="261" width="17.2" height="15.0" fill="rgb(252,101,50)" rx="2" ry="2" />
<text  x="27.69" y="271.5" ></text>
</g>
<g >
<title>__interceptor_pthread_create (2 samples, 0.06%)</title><rect x="41.2" y="229" width="0.7" height="15.0" fill="rgb(225,169,33)" rx="2" ry="2" />
<text  x="44.21" y="239.5" ></text>
</g>
<g >
<title>step (3 samples, 0.09%)</title><rect x="23.6" y="261" width="1.1" height="15.0" fill="rgb(246,140,27)" rx="2" ry="2" />
<text  x="26.58" y="271.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (44 samples, 1.37%)</title><rect x="25.1" y="229" width="16.1" height="15.0" fill="rgb(240,200,9)" rx="2" ry="2" />
<text  x="28.05" y="239.5" ></text>
</g>
<g >
<title>__do_page_fault (2 samples, 0.06%)</title><rect x="24.0" y="181" width="0.7" height="15.0" fill="rgb(227,223,7)" rx="2" ry="2" />
<text  x="26.95" y="191.5" ></text>
</g>
<g >
<title>do_anonymous_page (2 samples, 0.06%)</title><rect x="24.0" y="117" width="0.7" height="15.0" fill="rgb(220,57,29)" rx="2" ry="2" />
<text  x="26.95" y="127.5" ></text>
</g>
<g >
<title>irq_exit (3 samples, 0.09%)</title><rect x="877.6" y="213" width="1.1" height="15.0" fill="rgb(223,184,35)" rx="2" ry="2" />
<text  x="880.56" y="223.5" ></text>
</g>
<g >
<title>__run_timers.part.0 (1 samples, 0.03%)</title><rect x="1189.6" y="165" width="0.4" height="15.0" fill="rgb(251,164,4)" rx="2" ry="2" />
<text  x="1192.63" y="175.5" ></text>
</g>
<g >
<title>[nbody] (23 samples, 0.72%)</title><rect x="46.7" y="261" width="8.5" height="15.0" fill="rgb(206,165,21)" rx="2" ry="2" />
<text  x="49.71" y="271.5" ></text>
</g>
<g >
<title>flush_tlb_mm_range (2 samples, 0.06%)</title><rect x="13.3" y="133" width="0.7" height="15.0" fill="rgb(231,82,30)" rx="2" ry="2" />
<text  x="16.30" y="143.5" ></text>
</g>
<g >
<title>wake_up_q (2 samples, 0.06%)</title><rect x="906.6" y="133" width="0.7" height="15.0" fill="rgb(253,214,18)" rx="2" ry="2" />
<text  x="909.57" y="143.5" ></text>
</g>
<g >
<title>security_mmap_file (3 samples, 0.09%)</title><rect x="11.5" y="181" width="1.1" height="15.0" fill="rgb(209,68,33)" rx="2" ry="2" />
<text  x="14.47" y="191.5" ></text>
</g>
<g >
<title>__do_munmap (4 samples, 0.12%)</title><rect x="12.6" y="197" width="1.4" height="15.0" fill="rgb(238,147,8)" rx="2" ry="2" />
<text  x="15.57" y="207.5" ></text>
</g>
<g >
<title>__lru_cache_add (2 samples, 0.06%)</title><rect x="24.0" y="85" width="0.7" height="15.0" fill="rgb(239,101,33)" rx="2" ry="2" />
<text  x="26.95" y="95.5" ></text>
</g>
<g >
<title>__interceptor_pthread_join (1 samples, 0.03%)</title><rect x="24.7" y="245" width="0.4" height="15.0" fill="rgb(207,92,26)" rx="2" ry="2" />
<text  x="27.69" y="255.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="1189.6" y="229" width="0.4" height="15.0" fill="rgb(253,25,50)" rx="2" ry="2" />
<text  x="1192.63" y="239.5" ></text>
</g>
<g >
<title>inherit_task_group.isra.0.part.0 (2 samples, 0.06%)</title><rect x="17.7" y="149" width="0.7" height="15.0" fill="rgb(253,195,25)" rx="2" ry="2" />
<text  x="20.71" y="159.5" ></text>
</g>
<g >
<title>__delayacct_tsk_init (1 samples, 0.03%)</title><rect x="14.8" y="165" width="0.3" height="15.0" fill="rgb(248,145,8)" rx="2" ry="2" />
<text  x="17.77" y="175.5" ></text>
</g>
<g >
<title>try_to_wake_up (2 samples, 0.06%)</title><rect x="906.6" y="117" width="0.7" height="15.0" fill="rgb(227,187,38)" rx="2" ry="2" />
<text  x="909.57" y="127.5" ></text>
</g>
<g >
<title>memcg_kmem_get_cache (1 samples, 0.03%)</title><rect x="12.6" y="133" width="0.3" height="15.0" fill="rgb(219,156,50)" rx="2" ry="2" />
<text  x="15.57" y="143.5" ></text>
</g>
<g >
<title>__lock_text_start (2 samples, 0.06%)</title><rect x="906.6" y="101" width="0.7" height="15.0" fill="rgb(252,3,33)" rx="2" ry="2" />
<text  x="909.57" y="111.5" ></text>
</g>
<g >
<title>alloc_pages_current (4 samples, 0.12%)</title><rect x="15.9" y="149" width="1.4" height="15.0" fill="rgb(234,191,44)" rx="2" ry="2" />
<text  x="18.87" y="159.5" ></text>
</g>
<g >
<title>kfree (1 samples, 0.03%)</title><rect x="877.9" y="117" width="0.4" height="15.0" fill="rgb(240,193,29)" rx="2" ry="2" />
<text  x="880.93" y="127.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (3 samples, 0.09%)</title><rect x="877.6" y="229" width="1.1" height="15.0" fill="rgb(210,199,1)" rx="2" ry="2" />
<text  x="880.56" y="239.5" ></text>
</g>
<g >
<title>[unknown] (29 samples, 0.90%)</title><rect x="14.0" y="277" width="10.7" height="15.0" fill="rgb(206,20,36)" rx="2" ry="2" />
<text  x="17.04" y="287.5" ></text>
</g>
<g >
<title>__vm_munmap (4 samples, 0.12%)</title><rect x="12.6" y="213" width="1.4" height="15.0" fill="rgb(253,130,2)" rx="2" ry="2" />
<text  x="15.57" y="223.5" ></text>
</g>
<g >
<title>unmap_region (2 samples, 0.06%)</title><rect x="13.3" y="181" width="0.7" height="15.0" fill="rgb(234,17,8)" rx="2" ry="2" />
<text  x="16.30" y="191.5" ></text>
</g>
<g >
<title>perf_event_task_output (1 samples, 0.03%)</title><rect x="17.3" y="101" width="0.4" height="15.0" fill="rgb(253,39,42)" rx="2" ry="2" />
<text  x="20.34" y="111.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (3 samples, 0.09%)</title><rect x="877.6" y="197" width="1.1" height="15.0" fill="rgb(212,185,6)" rx="2" ry="2" />
<text  x="880.56" y="207.5" ></text>
</g>
<g >
<title>memcg_kmem_get_cache (1 samples, 0.03%)</title><rect x="14.8" y="133" width="0.3" height="15.0" fill="rgb(230,175,53)" rx="2" ry="2" />
<text  x="17.77" y="143.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="24.3" y="37" width="0.4" height="15.0" fill="rgb(252,201,24)" rx="2" ry="2" />
<text  x="27.32" y="47.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (2 samples, 0.06%)</title><rect x="24.0" y="69" width="0.7" height="15.0" fill="rgb(250,44,51)" rx="2" ry="2" />
<text  x="26.95" y="79.5" ></text>
</g>
<g >
<title>perf_iterate_sb (1 samples, 0.03%)</title><rect x="17.3" y="133" width="0.4" height="15.0" fill="rgb(232,116,3)" rx="2" ry="2" />
<text  x="20.34" y="143.5" ></text>
</g>
<g >
<title>__pthread_clockjoin_ex (1 samples, 0.03%)</title><rect x="41.9" y="277" width="0.4" height="15.0" fill="rgb(229,205,29)" rx="2" ry="2" />
<text  x="44.94" y="287.5" ></text>
</g>
<g >
<title>do_page_fault (2 samples, 0.06%)</title><rect x="24.0" y="197" width="0.7" height="15.0" fill="rgb(226,182,23)" rx="2" ry="2" />
<text  x="26.95" y="207.5" ></text>
</g>
<g >
<title>rcu_core_si (2 samples, 0.06%)</title><rect x="877.9" y="181" width="0.8" height="15.0" fill="rgb(208,32,31)" rx="2" ry="2" />
<text  x="880.93" y="191.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.09%)</title><rect x="23.6" y="245" width="1.1" height="15.0" fill="rgb(221,104,12)" rx="2" ry="2" />
<text  x="26.58" y="255.5" ></text>
</g>
<g >
<title>do_user_addr_fault (2 samples, 0.06%)</title><rect x="24.0" y="165" width="0.7" height="15.0" fill="rgb(214,176,40)" rx="2" ry="2" />
<text  x="26.95" y="175.5" ></text>
</g>
<g >
<title>perf_event_alloc (2 samples, 0.06%)</title><rect x="17.7" y="117" width="0.7" height="15.0" fill="rgb(205,181,28)" rx="2" ry="2" />
<text  x="20.71" y="127.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="24.0" y="53" width="0.3" height="15.0" fill="rgb(229,2,49)" rx="2" ry="2" />
<text  x="26.95" y="63.5" ></text>
</g>
<g >
<title>insert_vmap_area.constprop.0 (1 samples, 0.03%)</title><rect x="15.5" y="117" width="0.4" height="15.0" fill="rgb(243,207,50)" rx="2" ry="2" />
<text  x="18.51" y="127.5" ></text>
</g>
<g >
<title>ksys_mmap_pgoff (7 samples, 0.22%)</title><rect x="10.0" y="213" width="2.6" height="15.0" fill="rgb(221,21,27)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>nbody (3,214 samples, 100.00%)</title><rect x="10.0" y="293" width="1180.0" height="15.0" fill="rgb(208,209,29)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >nbody</text>
</g>
<g >
<title>free_event_rcu (1 samples, 0.03%)</title><rect x="877.9" y="133" width="0.4" height="15.0" fill="rgb(209,187,43)" rx="2" ry="2" />
<text  x="880.93" y="143.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.03%)</title><rect x="1189.6" y="213" width="0.4" height="15.0" fill="rgb(214,161,11)" rx="2" ry="2" />
<text  x="1192.63" y="223.5" ></text>
</g>
<g >
<title>do_mmap (4 samples, 0.12%)</title><rect x="10.0" y="181" width="1.5" height="15.0" fill="rgb(206,11,6)" rx="2" ry="2" />
<text  x="13.00" y="191.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="1189.6" y="245" width="0.4" height="15.0" fill="rgb(238,140,3)" rx="2" ry="2" />
<text  x="1192.63" y="255.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="878.3" y="101" width="0.4" height="15.0" fill="rgb(250,189,18)" rx="2" ry="2" />
<text  x="881.29" y="111.5" ></text>
</g>
<g >
<title>__handle_mm_fault (2 samples, 0.06%)</title><rect x="24.0" y="133" width="0.7" height="15.0" fill="rgb(233,34,8)" rx="2" ry="2" />
<text  x="26.95" y="143.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (1 samples, 0.03%)</title><rect x="14.0" y="261" width="0.4" height="15.0" fill="rgb(226,98,13)" rx="2" ry="2" />
<text  x="17.04" y="271.5" ></text>
</g>
<g >
<title>vm_mmap_pgoff (7 samples, 0.22%)</title><rect x="10.0" y="197" width="2.6" height="15.0" fill="rgb(240,32,45)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>perf_iterate_ctx (1 samples, 0.03%)</title><rect x="10.0" y="117" width="0.4" height="15.0" fill="rgb(250,24,35)" rx="2" ry="2" />
<text  x="13.00" y="127.5" ></text>
</g>
<g >
<title>__get_vm_area_node (1 samples, 0.03%)</title><rect x="15.5" y="149" width="0.4" height="15.0" fill="rgb(222,148,13)" rx="2" ry="2" />
<text  x="18.51" y="159.5" ></text>
</g>
<g >
<title>clear_page_orig (3 samples, 0.09%)</title><rect x="15.9" y="101" width="1.1" height="15.0" fill="rgb(250,144,49)" rx="2" ry="2" />
<text  x="18.87" y="111.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="1189.6" y="85" width="0.4" height="15.0" fill="rgb(241,185,10)" rx="2" ry="2" />
<text  x="1192.63" y="95.5" ></text>
</g>
<g >
<title>pow@@GLIBC_2.29 (316 samples, 9.83%)</title><rect x="907.3" y="261" width="116.0" height="15.0" fill="rgb(226,77,44)" rx="2" ry="2" />
<text  x="910.30" y="271.5" >pow@@GLIBC_2.29</text>
</g>
<g >
<title>call_timer_fn (1 samples, 0.03%)</title><rect x="1189.6" y="149" width="0.4" height="15.0" fill="rgb(205,90,32)" rx="2" ry="2" />
<text  x="1192.63" y="159.5" ></text>
</g>
<g >
<title>page_fault (2 samples, 0.06%)</title><rect x="24.0" y="213" width="0.7" height="15.0" fill="rgb(225,16,35)" rx="2" ry="2" />
<text  x="26.95" y="223.5" ></text>
</g>
<g >
<title>usb_hcd_poll_rh_status (1 samples, 0.03%)</title><rect x="1189.6" y="117" width="0.4" height="15.0" fill="rgb(218,100,20)" rx="2" ry="2" />
<text  x="1192.63" y="127.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (11 samples, 0.34%)</title><rect x="10.0" y="261" width="4.0" height="15.0" fill="rgb(216,19,22)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (2 samples, 0.06%)</title><rect x="24.0" y="101" width="0.7" height="15.0" fill="rgb(229,150,6)" rx="2" ry="2" />
<text  x="26.95" y="111.5" ></text>
</g>
<g >
<title>perf_event_init_task (2 samples, 0.06%)</title><rect x="17.7" y="165" width="0.7" height="15.0" fill="rgb(237,15,34)" rx="2" ry="2" />
<text  x="20.71" y="175.5" ></text>
</g>
<g >
<title>perf_iterate_sb (1 samples, 0.03%)</title><rect x="10.0" y="133" width="0.4" height="15.0" fill="rgb(215,10,14)" rx="2" ry="2" />
<text  x="13.00" y="143.5" ></text>
</g>
<g >
<title>exit_mm_release (2 samples, 0.06%)</title><rect x="906.6" y="197" width="0.7" height="15.0" fill="rgb(212,138,48)" rx="2" ry="2" />
<text  x="909.57" y="207.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (25 samples, 0.78%)</title><rect x="14.4" y="245" width="9.2" height="15.0" fill="rgb(237,126,31)" rx="2" ry="2" />
<text  x="17.41" y="255.5" ></text>
</g>
<g >
<title>__libc_start_main (47 samples, 1.46%)</title><rect x="24.7" y="277" width="17.2" height="15.0" fill="rgb(205,32,43)" rx="2" ry="2" />
<text  x="27.69" y="287.5" ></text>
</g>
<g >
<title>pthread_create@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="41.6" y="213" width="0.3" height="15.0" fill="rgb(242,34,0)" rx="2" ry="2" />
<text  x="44.57" y="223.5" ></text>
</g>
<g >
<title>futex_wake (2 samples, 0.06%)</title><rect x="906.6" y="149" width="0.7" height="15.0" fill="rgb(239,162,14)" rx="2" ry="2" />
<text  x="909.57" y="159.5" ></text>
</g>
<g >
<title>velocity_update (454 samples, 14.13%)</title><rect x="1023.3" y="261" width="166.7" height="15.0" fill="rgb(238,150,11)" rx="2" ry="2" />
<text  x="1026.32" y="271.5" >velocity_update</text>
</g>
<g >
<title>__x64_sys_clone (25 samples, 0.78%)</title><rect x="14.4" y="213" width="9.2" height="15.0" fill="rgb(248,190,3)" rx="2" ry="2" />
<text  x="17.41" y="223.5" ></text>
</g>
<g >
<title>do_syscall_64 (11 samples, 0.34%)</title><rect x="10.0" y="245" width="4.0" height="15.0" fill="rgb(249,31,54)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>inherit_event.isra.0 (2 samples, 0.06%)</title><rect x="17.7" y="133" width="0.7" height="15.0" fill="rgb(208,42,54)" rx="2" ry="2" />
<text  x="20.71" y="143.5" ></text>
</g>
<g >
<title>[libasan.so.5.0.0] (3 samples, 0.09%)</title><rect x="23.6" y="229" width="1.1" height="15.0" fill="rgb(217,153,33)" rx="2" ry="2" />
<text  x="26.58" y="239.5" ></text>
</g>
</g>
</svg>
